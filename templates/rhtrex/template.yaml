---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: rhtrex
  title: Create an Application based off of rhtrex
  description: Create an app based off of rhtrex
spec:
  owner: backstage/techdocs-core #CHANGE?
  type: service

  parameters:
  - title: Enter Application Name
    required:
    - appName
    properties:
      appName:
        title: App Name
        type: string
        description: Must match the name of the repository
        ui:autofocus: true
        ui:options:
          rows: 5  
  - title: Enter the name of the org responsible for the App
    required:
    - orgName
    properties:
      orgName:
        title: Org Name
        type: string
        description: Org name for the app
        ui:autofocus: true
        ui:options:
          rows: 5
  - title: Enter the Org token
    required:
    - token
    properties:
      token:
        title: Token
        type: string
        description: Org name for the app
        ui:autofocus: true
        ui:options:
          rows: 5
  - title: Choose a location
    required:
    - repoLoc
    properties:
      repoLoc:
        title: Repository Location
        type: string
        ui:field: RepoUrlPicker
        ui:options:
          allowedHosts: #check on allowed hosts
            - github.com
            - gitlabs.com

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          appName: ${{ parameters.appName }}
          orgName: ${{ parameters.orgName }}
          repoLoc: ${{ parameters.repoLoc }}

    #CREATE REPO 
    #below steps need conditionals added to them based on github v gitlabs      
    - id: create-gh-repo
      name: Create Github Repo
      action: github:repo:create
      input:
        repoUrl: ${{ parameters.repoLoc }} #this is the only req field
        description: Test description #string
        # access: #Sets an admin collaborator on the repository. Can either be a user reference different from 'owner' in 'repoUrl' or team reference, eg. 'org/team-name'
        # requireCodeOwnerReviews: # Require an approved review in PR including files with a designated Code Owner; bool
        token: ${{ parameters.token }} # Authentication Token: the token to use for authorization to GitHub
        # requiredCommitSigning: #bool
    - id: log-message
      name: Log Message
      action: debug:log
      input:
        message: 'RemoteURL: ${{ steps["create-gh-repo"].output.remoteUrl }}, ${{ steps["publish-repository"].output.repoContentsUrl }}!'

